type Option a = Some a | None

let opt_map f = \x ->
    match x with
        Some y -> Some (f y),
        None -> None

let incr : Int -> Int
let incr = add 1

rec fact n =
    if eq n 0 then
        1
    else
        mul n (fact (sub n 1))

type List a = Cons (a, List a) | Empty

rec range from = \to ->
    if gte to from then
        Cons (to, (range from (sub to 1)))
    else
        Empty

rec list_map f = \x ->
    match x with
        Cons (hd, tl) -> Cons (f hd, list_map f tl),
        Empty -> Empty

rec list_length_helper count = \x ->
    match x with
        Cons (hd, tl) -> list_length_helper (add 1 count) tl,
        Empty -> count

let list_length x =
    list_length_helper 0 x


let main = (fact 6, opt_map list_length (opt_map (range 0) (Some 1)))